grammar<'input>;

use parser::types;    
use tok::{Tok, Error, CaseInsensitiveUserStr, UserStr};

pub Program: types::Program =
    StmtSeparator? <programs_units: Stmts<ProgramUnit>> =>
        types::Program::new(programs_units);

ProgramUnit: types::ProgramUnit = {
    MainProgram,
};

MainProgram: types::ProgramUnit = {
    <stmt:ProgramStmt?> SpecificationPart? ExecutionPart? InternalSubprogramPart? <end:EndProgramStmt> =>
        types::ProgramUnit::new(stmt, end)
};

ProgramStmt: String = {
    "PROGRAM" <name:"Id"> StmtSeparator => name.as_string()
};

EndProgramStmt: Option<String> = {
    <program: EndProgram> StmtSeparator => program
};

EndProgram: Option<String> = {
    "END" "PROGRAM" <name:"Id"> => Some(name.as_string()),
    "END" "PROGRAM"?            => None,
};

SpecificationPart: () = {};
ExecutionPart: () = ExecutableConstruct ExecutablePartConstruct*;
ExecutablePartConstruct: () = {};
InternalSubprogramPart: () = {};

ExecutableConstruct: () = {
    ActionStmt,
    // AssociateConstruct,
    // BlockConstruct,
    // CaseConstruct,
    // CriticalConstruct,
    // DoConstruct,
    // IfConstruct,
    // SelectRankConstruct,
    // SelectTypeConstruct,
    // WhereConstruct,
    // ForallConstruct,
};

ActionStmt: () = {
    // AllocateStmt,
    // AssignmentStmt,
    // BackspaceStmt,
    // CallStmt,
    // CloseStmt,
    // ContinueStmt,
    // CycleStmt,
    // DeallocateStmt,
    // EndFunctionStmt,
    // EndMpSubprogramStmt,
    // EndProgramStmt,
    // EndSubroutineStmt,
    // EndfileStmt,
    // ErrorStopStmt,
    // EventPostStmt,
    // EventWaitStmt,
    // ExitStmt,
    // FlushStmt,
    // GotoStmt,
    // IfStmt,
    // InquireStmt,
    // LockStmt,
    // NullifyStmt,
    // OpenStmt,
    // PointerAssignmentStmt,
    PrintStmt,
    // ReadStmt,
    // ReturnStmt,
    // RewindStmt,
    // StopStmt,
    // SyncAllStmt,
    // SyncImagesStmt,
    // SyncMemoryStmt,
    // UnlockStmt,
    // WaitStmt,
    // WhereStmt,
    // WriteStmt,
    // ComputedGotoStmt,
    // ForallStmt,
};

PrintStmt: () = "PRINT" Format "," List<OutputItem> StmtSeparator;

Format: () = {
    DefaultCharExpr,
    Label,
    "*"
};

Label: () = "DigitString";

OutputItem: () = {
    Expr,
    // IoImpliedDo
};

DefaultCharExpr = Expr;

Expr: () = {
    Level5Expr,
    Expr "DefinedOp" Level5Expr,
};

Level5Expr: () = {
    EquivOperand,
    Level5Expr EquivOp EquivOperand
};

Level4Expr: () = {
    Level3Expr,
    Level3Expr RelOp Level3Expr,
};

Level3Expr: () = {
    Level2Expr,
    Level3Expr "//" Level2Expr,
};

Level2Expr: () = {
    AddOperand,
    AddOp AddOperand,
    Level2Expr AddOp AddOperand,
};
Level1Expr: () = {
    Primary,
    "DefinedOp" Primary,
};

AndOperand: () = {
    Level4Expr,
    ".NOT." Level4Expr,
};

OrOperand: () = {
    AndOperand,
    OrOperand ".AND." AndOperand,
};

EquivOperand: () = {
    OrOperand,
    EquivOperand ".OR." OrOperand,
};

MultOperand: () = {
    Level1Expr,
    Level1Expr "**" MultOperand,
};

AddOperand: () = {
    MultOperand,
    AddOperand MultOp MultOperand,
};

EquivOp: () = {
    ".EQV.",
    ".NEQV.",
};

RelOp: () = {
    ".EQ.",
    ".NE.",
    ".LT.",
    ".LE.",
    ".GT.",
    ".GE.",
};

AddOp: () = {
    "+",
    "-",
};

MultOp: () = {
    "*",
    "/"
};

Primary: () = {
    Constant,
    // Designator,
    // ArrayConstructor,
    // StructureConstructor,
    // FunctionReference,
    // TypeParamInquiry,
    // TypeParamName,
    "(" Expr ")"
};

Constant: () = {
    LiteralConstant,
    // NamedConstant,
};

LiteralConstant: () = {
    // IntLiteralConstant,
    // RealLiteralConstant,
    // ComplexLiteralConstant,
    // LogicalLiteralConstant,
    "CharLiteral",
    // BozLiteralConstant,
};

Stmts<T>: Vec<T> = {
    <v:(<T> StmtSeparator)*> <e:T?> => match e {
        None=> v,
        Some(e) => {
            let mut v = v;
            v.push(e);
            v
        }
    }
};

List<T>: Vec<T> = {
    <v:(<T> ",")*> <e:T?> => match e {
        None=> v,
        Some(e) => {
            let mut v = v;
            v.push(e);
            v
        }
    }
};

StmtSeparator: () = "EOS";

extern {
    type Location = usize;
    type Error = Error;

    enum Tok<'input> {
        "PROGRAM"        => Tok::Program,
        "END"            => Tok::End,
        "PRINT"          => Tok::Print,
        "Id"             => Tok::Id(<CaseInsensitiveUserStr<'input>>),
        "IntegerLiteral" => Tok::IntegerLiteralConstant(<UserStr<'input>>),
        "DigitString"    => Tok::DigitString(<UserStr<'input>>),
        "CharLiteral"    => Tok::CharLiteralConstant(<UserStr<'input>>),
        "DefinedOp"      => Tok::DefinedOperator(<CaseInsensitiveUserStr<'input>>),
        ".AND."          => Tok::And,
        ".EQV."          => Tok::Equivalent,
        ".NEQV."         => Tok::NotEquivalent,
        ".NOT."          => Tok::Not,
        ".OR."           => Tok::Or,
        ".EQ."           => Tok::Equals,
        ".NE."           => Tok::NotEquals,
        ".LT."           => Tok::LessThan,
        ".LE."           => Tok::LessThanOrEquals,
        ".GT."           => Tok::GreaterThan,
        ".GE."           => Tok::GreaterThanOrEquals,
        "//"             => Tok::SlashSlash,
        "+"              => Tok::Plus,
        "-"              => Tok::Minus,
        "*"              => Tok::Star,
        "/"              => Tok::Slash,
        "**"             => Tok::StarStar,
        "EOS"            => Tok::EOS,
        ","              => Tok::Comma,
        "("              => Tok::LeftParen,
        ")"              => Tok::RightParen,
    }
}